Frequenty Asked Questions:

*Contents
1.  What is slapt-get ?
2.  Why yet another package management tool for slackware?
3.  How do I build/install slapt-get?  How do I remove slapt-get?
4.  How do I find a package I want to install?
5.  Can I upgrade all my installed packages?
6.  How can I see what will be upgraded without upgrading?
7.  What if I only want to download the updates?
8.  How can I re-install an existing package?
9.  Can I "dist-upgrade" to a newer Slackware release?
10. What about package dependancies?
11. What about multiple package sources, ala linuxpackages.net?
12. I don't like the download spinner, how can I get more statistics?
13. How can I install every available package?
14. What if I only want to upgrade one package?
15. What about Dropline support?



1.  What is slapt-get ?

 slapt-get is an APT like system for Slackware package management. It allows
 one to search slackware.com and mirrors for packages, compare them with
 installed packages, install new packages or upgrade installed packages all
 with a few simple commands. Great for scripting as well.

2.  Why yet another package management tool for slackware?

 To scratch and itch of mine, which also scratched an itch of a friend.  I
 created it originally without looking for an existing solution.  I now
 understand Slackware already has existing utilities that provide similar
 functionality.  I believe slapt-get to be superior because of it's speed and
 simplicity.  I do not believe slapt-get takes away anything from these
 existing tools.  slapt-get can stand on it's own merits.  I think choice is
 great for the end user (see Gnome vs KDE).  I do not aim for inclusion
 within Slackware.  I simply make this available in hopes others will find
 it useful.
 
3.  How do I build/install slapt-get?  How do I remove slapt-get?

 Two ways to install:

  A: You can build slapt-get from source and use the 'install' make target,
 
  B: You can build from source and make a Slackware package with the 'pkg'
     make target.  Then install the generated package within the newly created
     'pkg' directory.

 If you installed via `make install`, there is an 'uninstall' make target.

 If you installed the slack package, then use removepkg.

4.  How do I find a package I want to install?

 You can use the --search feature, supplying an expression.  POSIX 
 regular expressions are supported.

5.  Can I upgrade all my installed packages?

 Yes, simply use the --upgrade option.  slapt-get will check for 
 newer versions of all packages already installed.

6.  How can I see what will be upgraded without upgrading?

 Use the --simulate option before --upgrade.
 See slapt-get --help

7.  What if I only want to download the updates?

 Use the --download-only option before --upgrade.
 See slapt-get --help

8.  How can I re-install an existing package?

 Use the --reinstall option before --install
 See slapt-get --help

9.  Can I "dist-upgrade" to a newer Slackware release?

 Change your mirror location within /etc/slapt-getrc to point to the newer
 release directory.  --update your local package data cache, then --upgrade
 to the newer release.

 For instance, you have the following uncommented line as your mirror:

  MIRROR=ftp://distro.ibiblio.org/pub/Linux/distributions/slackware/slackware-9.0/

 Simply change the url to point to current, like so:

  MIRROR=ftp://distro.ibiblio.org/pub/Linux/distributions/slackware/slackware-current/

 Now you simply --update to retrieve the package data for that release.

 CAVEAT: The simplicity of slapt-get means a lot of assurances are not in
         place.  You can break a working system if you do not follow the
         suggestions in UPGRADE.TXT.

         If you have a broken system, make sure aaa_base is at least installed.
         Make sure it's downloaded: slapt-get --download-only --install aaa_base
         Then untar it from /.

         Sometimes upgrades fail, make sure /bin/sh is either a binary or 
         symlink to `which bash`.

10.  What about package dependancies?

 Other tools try to provide dependancy checking via various hacks (generating
 the dependancy file, exploding the package, then ldd'ing binary files to find
 missing libraries before consulting the dependancy file).  This is not a
 reliable/fool proof method.  It is also extremely slow.

 I have sent Pat a request to include a requires field in the PACKAGES.TXT
 file that is shared with all the mirrors.  Since this information is known
 when the package is created, this is the best time/place to make that data
 available.  It is a simple progression from making a note within the package
 description such as the one already within the man package:

   man: man (format and display the on-line manual pages)
   man:
   man: The man package is a collection of tools used for searching and
   man: reading the online system documentation.  In fact, on most UNIX-like
   man: operating systems it is the primary means of finding out how programs
   man: on the system work.  For example, 'man man' will display the
   man: documentation for man itself.
   man:
   man: *-->*Man requires the groff text processing package.*<--*
   man:

 to providing that data in a way that can be scripted for those who have
 the advanced knowledge or want to provide higher level tools for Slackware.

 So Pat's generated PACKAGES.TXT file would need an addition to the
 package's entry, going from:

   PACKAGE NAME:  man-1.5l-i386-1.tgz
   PACKAGE LOCATION:  ./slackware/ap
   PACKAGE SIZE (compressed):  166 K
   PACKAGE SIZE (uncompressed):  390 K
   PACKAGE DESCRIPTION:
   man: man (format and display the on-line manual pages)

 to this (note only an additional line per package entry):

   PACKAGE NAME:  man-1.5l-i386-1.tgz
   PACKAGE LOCATION:  ./slackware/ap
   PACKAGE SIZE (compressed):  166 K
   PACKAGE SIZE (uncompressed):  390 K
   PACKAGE REQUIRES: groff,man-pages
   PACKAGE DESCRIPTION:
   man: man (format and display the on-line manual pages)

 He has declined the request at this time, citing a "niche" for a
 distribution without "dependancy hell".  I believe leaving out the requirement
 field does not prevent dependancy hell, it simply hides it, passing the burden
 on to the users and system administrators who simply want to be able to
 quickly install and deploy servers and services.  Yes it is good for new users
 to become familiar with the process of locating and resolving library
 dependancies.  But I think this becomes tedious after the initial lesson has
 been learned.  However, I am thankful for Pat's dedication to his goals and
 ideals.  So I have simply dropped the issue.

 I hope if the community as a whole agrees that this is an added benefit 
 (without becoming overly complex or kludgey) they can convince Pat there is
 a need/demand for it.

 We are working with the linuxpackages.net crew to integrate dependancy 
 with their package listing.

11. What about multiple package sources, ala linuxpackages.net?

 You can now use multiple sources with slapt-get (including linuxpackages.net).
 See the example slapt-getrc in the source tarball, or look in
 /etc/slapt-getrc.new if you installed via slackpack.

12. I don't like the download spinner, how can I get more statistics?

 If you would like more notification on downloading pkgs/files, change the 
 USE_CURL_PROGRESS macro to 1 in include/curl.h.  This turns on curl's
 internal progress meter.  This requires a recompile.

13. How can I install every available package?

 Even though it's not built in, it's simple since slapt-get is easy to script
 with.  Here is a simple shell script to install every package that is
 available but not currently installed:

   #!/bin/sh
   # Dan Barber <danb at mojolin dot com>
   slapt-get --update
   slapt-get --installed > /tmp/slapt_get_installed
   for file in `slapt-get --list | cut -f1 -d" " | sort`
     do
     echo -n "$file "
     if [ -z "`grep "\W+$file\W+" /tmp/slapt_get_installed`" ]; then
       if [ -z "`grep '\W+$file\W?' /etc/slapt-getrc`" ]; then
         echo "excluded"
       else
         echo "not installed"
         slapt-get --install $file
       fi
     fi
   done



14. What if I only want to upgrade one package?

 Then you follow the debian apt-get method of using --install.
 If the package is already installed, it will check and install any newer
 versions:

 slapt-get --install {pkg_name}


15. What about Dropline support?

 There is no exception for dropline packages.  If you do not want them
 upgraded, either put the package names into the exception list or answer
 "NO" in interactive mode (do not use --no-prompt).

