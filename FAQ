Frequenty Asked Questions:

*Contents
1.  What is slapt-get ?
2.  Why yet another package management tool for slackware?
3.  How do I build/install slapt-get?  How do I remove slapt-get?
4.  How do I find a package I want to install?
5.  Can I upgrade all my installed packages?
6.  How can I see what will be upgraded without upgrading?
7.  What if I only want to download the updates?
8.  How can I re-install an existing package?
9.  Can I "dist-upgrade" to a newer Slackware release?
10. What about package dependancies?
11. What about multiple package sources, ala linuxpackages.net?
12. I don't like the download spinner, how can I get more statistics?
13. How can I install every available package?
14. What if I only want to upgrade one package?
15. What about Dropline support?
16. How can I generate an exclude list for an entire disk set?
17. How do I use a local file source?
18. How can I download every package in a disk set?
19. How can I add dependency information to my packages?
22. How do I get the newest development version of slapt-get?
23. How can I contribute my ideas or code?



1.  What is slapt-get ?

 slapt-get is an APT like system for Slackware package management. It allows
 one to search slackware.com and mirrors for packages, compare them with
 installed packages, install new packages or upgrade installed packages all
 with a few simple commands. Great for scripting as well.

2.  Why yet another package management tool for slackware?

 To scratch and itch of mine, which also scratched an itch of a friend.  I
 created it originally without looking for an existing solution.  I now
 understand Slackware already has existing utilities that provide similar
 functionality.  I believe slapt-get to be superior because of it's speed and
 simplicity.  I do not believe slapt-get takes away anything from these
 existing tools.  slapt-get can stand on it's own merits.  I think choice is
 great for the end user (see Gnome vs KDE).  I do not aim for inclusion
 within Slackware.  I am making this available in hopes others will find
 it useful.
 
3.  How do I build/install slapt-get?  How do I remove slapt-get?

 Two ways to install:

  A: You can build slapt-get from source and use the 'install' make target,
 
  B: You can build from source and make a Slackware package with the 'pkg'
     make target.  Then install the generated package within the newly created
     'pkg' directory.

 If you installed via `make install`, there is an 'uninstall' make target.

 If you installed the slack package, then use removepkg.

4.  How do I find a package I want to install?

 You can use the --search feature, supplying an expression.  POSIX 
 and extended regular expressions are supported.  This searches the name,
 location, or descriptions of packages.

5.  Can I upgrade all my installed packages?

 Yes, use the --upgrade option.  slapt-get will check for 
 newer versions of all packages already installed.

6.  How can I see what will be upgraded without upgrading?

 If the transaction report is not enough, use the --simulate option before
 --upgrade.  See slapt-get --help

7.  What if I only want to download the updates?

 Use the --download-only option before --upgrade.
 See slapt-get --help

8.  How can I re-install an existing package?

 Use the --reinstall option with --install pkg_name.
 See slapt-get --help

9.  Can I "dist-upgrade" to a newer Slackware release?

 Yes.

 Change your source location within /etc/slapt-getrc to point to the newer
 release directory.  --update your local package cache, then --dist-upgrade
 to the newer release.  You will also want to disable any third party package
 sources while upgrading to a newer release so you do not mix and match
 packages.

 For instance, you have the following uncommented line as your source:

   SOURCE=ftp://distro.ibiblio.org/pub/Linux/distributions/slackware/slackware-9.0/

 Simply change the url to point to current, like so:

   SOURCE=ftp://distro.ibiblio.org/pub/Linux/distributions/slackware/slackware-current/

 CAVEAT: The simplicity of slapt-get means a lot of assurances are not in
         place.  You can break a working system if you do not follow the
         suggestions in UPGRADE.TXT.

 Now you --dist-upgrade to retrieve the package data for that release.
 What dist-upgrade does is basically make sure that any missing packages
 from the base disk set are installed, as well as upgrade to any newer
 versions of the currently installed packages.  All of this happens in
 one transaction.

 dist-upgrade'ing involves doing the following:

   ### upgrade your local package cache
   $ slapt-get --update

   ### make sure you have all the packages for the upgrade locally
   $ slapt-get --download-only --dist-upgrade

   ### switch to single user mode
   $ telinit 1

   ### first, upgrade the most important
   #(this installs any newer versions)
   $ slapt-get --install glibc-solibs pkgtools sed

   ### then, let slapt-get upgrade the rest
   $ slapt-get --dist-upgrade

 Then follow the rest of the directions in UPGRADE.TXT.

10.  What about package dependancies?

 Other tools try to provide dependency checking via various hacks (generating
 the dependency file, exploding the package, then ldd'ing binary files to find
 missing libraries before consulting the dependency file).  This is not a
 reliable/fool proof method.  It is also extremely slow.

 I have sent Pat a request to include a requires field in the PACKAGES.TXT
 file that is shared with all the mirrors.  Since this information is known
 when the package is created, this is the best time/place to make that data
 available.  It is a simple progression from making a note within the package
 description such as the one already within the man package:

   man: man (format and display the on-line manual pages)
   man:
   man: The man package is a collection of tools used for searching and
   man: reading the online system documentation.  In fact, on most UNIX-like
   man: operating systems it is the primary means of finding out how programs
   man: on the system work.  For example, 'man man' will display the
   man: documentation for man itself.
   man:
   man: *-->*Man requires the groff text processing package.*<--*
   man:

 to providing that data in a way that can be scripted for those who have
 the advanced knowledge or want to provide higher level tools for Slackware.

 So Pat's generated PACKAGES.TXT file would need an addition to the
 package's entry, going from:

   PACKAGE NAME:  man-1.5l-i386-1.tgz
   PACKAGE LOCATION:  ./slackware/ap
   PACKAGE SIZE (compressed):  166 K
   PACKAGE SIZE (uncompressed):  390 K
   PACKAGE DESCRIPTION:
   man: man (format and display the on-line manual pages)

 to this (note only an additional line per package entry):

   PACKAGE NAME:  man-1.5l-i386-1.tgz
   PACKAGE LOCATION:  ./slackware/ap
   PACKAGE SIZE (compressed):  166 K
   PACKAGE SIZE (uncompressed):  390 K
   PACKAGE REQUIRES: groff,man-pages
   PACKAGE DESCRIPTION:
   man: man (format and display the on-line manual pages)

 which could be generated from a file such as: ./install/slack-required .

 He has declined the request at this time, citing a "niche" for a
 distribution without "dependency hell".  I believe leaving out the requirement
 field does not prevent dependency hell, it hides it, passing the burden
 on to the users and system administrators who simply want to be able to
 quickly install and deploy servers and services.  Yes it is good for new users
 to become familiar with the process of locating and resolving library
 dependancies.  But I think this becomes tedious after the initial lesson has
 been learned.  However, I am thankful for Pat's dedication to his goals and
 ideals.  So I have dropped the issue.

 I hope if the community as a whole agrees that this is an added benefit 
 (without becoming overly complex or kludgey) they can convince Pat there is
 a need/demand for it.

 We are working with the linuxpackages.net crew to integrate dependency data
 with their package listing.

11. What about multiple package sources, ala linuxpackages.net?

 You can now use multiple sources with slapt-get (including linuxpackages.net).
 See the example slapt-getrc in the source tarball, or look in
 /etc/slapt-getrc.new if you installed via slackpack. See README.

12. I don't like the download spinner, how can I get more statistics?

 If you would like more notification on downloading pkgs/files, change the 
 USE_CURL_PROGRESS macro to 1 in include/curl.h.  This turns on curl's
 internal progress meter.  This requires a recompile.

13. How can I install every available package?

 Even though it's not built in, it's simple since slapt-get is easy to script
 with.  Here is a simple shell script to install every package that is
 available but not currently installed:

   #!/bin/sh
   # Dan Barber <danb at mojolin dot com>
   slapt-get --update
   slapt-get --installed > /tmp/slapt_get_installed
   for file in `slapt-get --list | cut -f1 -d" " | sort`
     do
     echo -n "$file "
     if [ -z "`grep "\W+$file\W+" /tmp/slapt_get_installed`" ]; then
       if [ -z "`grep '\W+$file\W?' /etc/slapt-getrc`" ]; then
         echo "excluded"
       else
         echo "not installed"
         slapt-get --install $file
       fi
     fi
   done



14. What if I only want to upgrade one package?

 Then you follow the debian apt-get method of using --install.
 If the package is already installed, it will check and install any newer
 versions:

 slapt-get --install {pkg_name}


15. What about Dropline support?

 There is no direct support for dropline packages.  If you do not want them
 upgraded, either put the package names or regex into the exception list or
 use interactive mode (do not use --no-prompt, use --interactive).

 You can use the following for a dropline exclude (from example slapt-getrc):
 
  EXCLUDE=kernel-ide,kernel-source,kernel-headers,kernel-modules,lilo,.*-dl$,devs


16. How can I generate an exclude list for an entire disk set?

 You can use this script to generate a listing of packages to add to your
 exlude list:

   #!/bin/sh
   # this should gen an exclude list for a particular dir set (first arg to script)
   DIR=$1
   slapt-get --search "^\.\/slackware\/${DIR}$"|awk '{print $1}'|\
    xargs -iZ echo -n "Z,"|sed -e 's/,$//'

17. How do I use a local file source?

 Within slapt-getrc, change your SOURCE= lines to point to file:// url's.

 For example, you could have an official and a local source like:
 SOURCE=ftp://ftp.slackware.no/pub/linux/slackware/slackware-9.1/
 SOURCE=file:///usr/src/local_pkg_repository/

 This local directory must have the PACKAGES.TXT and CHECKSUMS.md5 files
 present.  This could be a mounted Slackware release CDROM, or a custom
 repository.

 The CHECKSUMS.md5 file can be generated with find:
  rm CHECKSUMS.md5; find . -name '*.tgz' -exec md5sum {} >> CHECKSUMS.MD5 \;

 The PACKAGES.TXT can be generated by the following script:

 ### BEGIN SCRIPT
    #!/bin/sh

    function gen_packages_txt {
	    echo '' > PACKAGES.TXT
	    find . -type f -name '*.meta' -exec cat {} \; >> PACKAGES.TXT
    }

    function gen_md5_checksums {
	    echo '' > CHECKSUMS.md5
	    find . -type f -name '*.tgz' -exec md5sum {} \; >> CHECKSUMS.md5
    }

    function gen_meta {
	    if [ ! -f $1 ]; then
		    echo "File not found: $1"
		    exit 1;
	    fi
			if [ "`echo $pkg|grep -E '([a-zA-Z0-9\\+_\\-]+)-([a-zA-Z0-9._\\-]+).tgz$'`" == "" ]; then
				return;
			fi
	    NAME=$(echo $1|sed -re "s/([a-zA-Z0-9\/\.\-\+]+\/)(.*.tgz)$/\2/")
	    LOCATION=$(echo $1|sed -re "s/([a-zA-Z0-9\/\.\-\+]+\/)(.*.tgz)$/\1/")
	    SIZE=$( expr `gunzip -l $1 |tail -1|awk '{print $1}'` / 1024 )
	    USIZE=$( expr `gunzip -l $1 |tail -1|awk '{print $2}'` / 1024 )
	    REQUIRED=$(tar xzf $1 install/slack-required -O 2>/dev/null|xargs -r -iZ echo -n "Z,"|sed -e "s/,$//")
	    METAFILE=$(echo $NAME|sed -re "s/\.tgz$/\.meta/")
	    echo "PACKAGE NAME:  $1" > $LOCATION/$METAFILE
	    echo "PACKAGE LOCATION:  $NAME" >> $LOCATION/$METAFILE
	    echo "PACKAGE SIZE (compressed):  $SIZE K" >> $LOCATION/$METAFILE
	    echo "PACKAGE SIZE (uncompressed):  $USIZE K" >> $LOCATION/$METAFILE
	    echo "PACKAGE REQUIRED:  $REQUIRED" >> $LOCATION/$METAFILE
	    echo "PACKAGE DESCRIPTION:" >> $LOCATION/$METAFILE
	    tar xzf $1 install/slack-desc -O|grep -E '\w+\:'|grep -v '^#' >> $LOCATION/$METAFILE
	    echo "" >> $LOCATION/$METAFILE
    }

    case "$1" in
	    pkg)
		    if [ -n "$2" ]; then
			    gen_meta $2
		    else
			    echo "$0 [pkg [file]|all|PACKAGESTXT|MD5]"
		    fi
	    ;;
	    all)
		    for pkg in `find . -type f -name '*.tgz' -print`
		    do
			    gen_meta $pkg
		    done
	    ;;
	    new)
		    for pkg in `find . -type f -name '*.tgz' -print`
		    do
			    if [ ! -f "`echo $pkg|sed -re 's/\.tgz$/\.meta/'`" ]; then
				    gen_meta $pkg
			    fi
		    done
	    ;;
	    PACKAGESTXT)
		    gen_packages_txt
	    ;;
	    MD5)
		    gen_md5_checksums
	    ;;
	    *)
		    echo "$0 [pkg [file]|all|PACKAGESTXT|MD5]"
	    ;;
    esac
 ### END SCRIPT

18. How can I download every package in a disk set?

 You can search the package location field, which specifies which directory
 the package resides in, on the mirror.

 Most mirrors use ./slackware/{disk set} as the directory for the set.  Thus
 to install every package from xap:

   ./slapt-get --search '^\.\/slackware\/xap$'|awk '{print $1}'| \
     xargs -r ./slapt-get --install

19. How can I add dependency information to my packages?

 This is for package developers.  If you are not a package developer, please
 request your packager include this information.

 To export the dependency data for a package, include within your package the
 following file:

   ./install/slack-required

 The structure of this file is one entry per line in the following format:

    package_name

 or
    [package_name] [condition] [version]

 where [condition] is

    =, >=, =<, <, or >

 <= and =< should both work, just in case of editing errors.

 An example slack-required file is present within the slapt-get slack package.

 This data will then need to be extracted when the mirror's PACKAGES.TXT file
 is generated.  See FAQ #17 for an example of how to generate the
 PACKAGES.TXT file.  The following is an example entry:

    PACKAGE NAME:  man-pages-1.56-noarch-1.tgz
    ...(snip)
    PACKAGE REQUIRED:  man >= 1.5l-i386-1

 An example command to pull that data:
   tar xzf pkg-name-version-arch-rel.tgz install/slack-required -O|xargs -iZ echo -n "Z,"|sed -e "s/,$//"

20. How do I get the newest development version of slapt-get?

 See the 'Using cvs' section of the INSTALL document.

23. How can I contribute my ideas or code?

 Send in ideas or patches to the development list:

   slapt-get-devel at software dot jaos dot org

 The user list can be used for questions on slapt-get usage, etc:

   slapt-get-user at software dot jaos dot org

